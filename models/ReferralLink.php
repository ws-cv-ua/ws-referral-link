<?php

namespace wscvua\ws_referral_link\models;

use wscvua\ws_referral_link\models\ReferralLinkStatistic;
use Yii;

/**
 * This is the model class for table "{{%ReferralLink}}".
 *
 * @property integer $id
 * @property string $link
 * @property string $key
 *
 * @property ReferralLinkStatistic[] $referralLinkStatistics
 * @property integer $followingCount
 */
class ReferralLink extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%ReferralLink}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['link', 'key'], 'string', 'max' => 255],
            [['link', 'key'], 'unique'],
            ['link', 'url'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'link' => Yii::t('app', 'Link'),
            'key' => Yii::t('app', 'Key'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReferralLinkStatistics()
    {
        return $this->hasMany(ReferralLinkStatistic::className(), ['rl_id' => 'id']);
    }

    public function beforeValidate()
    {
        if (!$this->key)
            do {
                $this->key = Yii::$app->security->generateRandomString();
            } while (self::findByKey($this->key));
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function addFollowing()
    {
        $model = new ReferralLinkStatistic([
            'rl_id' => $this->id,
        ]);
        return $model->save();
    }

    public function getFollowingCount()
    {
        return ReferralLinkStatistic::find()
            ->where(['rl_id' => $this->id])
            ->count();
    }

    public static function findByKey($key)
    {
        return self::findOne([
            'key' => $key
        ]);
    }

    public static function findByLink($link)
    {
        $params = compact('link');
        $model = self::findOne($params);
        if (!$model) {
            $model = new self($params);
            $model->save();
        }

        return $model;
    }
}